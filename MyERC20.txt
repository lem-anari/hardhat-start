const {
    time,
    loadFixture,
  } = require("@nomicfoundation/hardhat-network-helpers");
  const { anyValue } = require("@nomicfoundation/hardhat-chai-matchers/withArgs");
  const { expect } = require("chai");
const { isCallTrace } = require("hardhat/internal/hardhat-network/stack-traces/message-trace");
  let myERC20;
  describe("MyERC20", async function () {
    async function deployOneYearLockFixture() {

      // Contracts are deployed using the first signer/account by default
      const [owner, otherAccount] = await ethers.getSigners();
      //let from = '';
      //let to = ['', ''];
      const lockedAmount = [2_000_000_000, 3_000_000_000];
      const MyERC20 = await ethers.getContractFactory("MyERC20");
      const myERC20 = await MyERC20.deploy();
      //await myERC20.deployed();
  
      return { myERC20, lockedAmount, owner, otherAccount};
    }
      /*const MyERC20 = await ethers.getContractFactory("MyERC20");
      const myERC20 = await MyERC20.deploy();
      await myERC20.deployed();
      console.log('Address of token: ', myERC20.address);*/ //ok
      
      
      describe("Transfers Massive", function () {
        /*it("Should transfer the funds to the owner", async function () {
          const { lock, unlockTime, lockedAmount, owner } = await loadFixture(
            deployOneYearLockFixture
          );*/
          it("Should transfer the funds to the owner", async function(){

            //await myERC20.transferMassive(from, to, amount);
            //console.log('transferMassive');
            const { myERC20, lockedAmount, owner } = await loadFixture(
              deployOneYearLockFixture
            );
  
          await expect(myERC20.transferMassive()).to.changeEtherBalances(
            [owner, myERC20],
            [lockedAmount, -lockedAmount]
          );
        });
      });
      /*describe("Transfers", function () {
        it("Should transfer the funds to the owner", async function () {
          const { lock, unlockTime, lockedAmount, owner } = await loadFixture(
            deployOneYearLockFixture
          );
  
          await time.increaseTo(unlockTime);
  
          await expect(lock.withdraw()).to.changeEtherBalances(
            [owner, lock],
            [lockedAmount, -lockedAmount]
          );
        });
      });*/
    });
  
